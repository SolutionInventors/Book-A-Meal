{"version":3,"sources":["../../server/services/mealService.js"],"names":["MealService","mealObj","successCallBack","onError","Meal","create","then","id","meal","name","amount","image","createdAt","catch","error","limit","callback","errorCallback","findAll","meals","findOne","where","destroy","deletedRows","newMeal","update","returning","updatedRows","updatedMeal","err"],"mappings":";;;;;;;;;;AAAA;;;;;;;;IAEMA,W;;;;;;;2BACGC,O,EAASC,e,EAAiBC,O,EAAS;AACxC,sBAAGC,IAAH,CAAQC,MAAR,CAAeJ,OAAf,EACGK,IADH,CACQ;AAAA,eACJJ,gBAAgB;AACdK,cAAIC,KAAKD,EADK;AAEdE,gBAAMD,KAAKC,IAFG;AAGdC,kBAAQF,KAAKE,MAHC;AAIdC,iBAAOH,KAAKG,KAJE;AAKdC,qBAAWJ,KAAKI;AALF,SAAhB,CADI;AAAA,OADR,EASGC,KATH,CASS;AAAA,eAASV,QAAQW,KAAR,CAAT;AAAA,OATT;AAUD;;;2BAEMC,K,EAAOC,Q,EAAUC,a,EAAe;AACrC,sBAAGb,IAAH,CAAQc,OAAR,CAAgB,EAAEH,YAAF,EAAhB,EAA2BT,IAA3B,CAAgC,UAACa,KAAD,EAAW;AACzCH,iBAASG,KAAT;AACD,OAFD,EAEGN,KAFH,CAES;AAAA,eAASI,cAAcH,KAAd,CAAT;AAAA,OAFT;AAGD;;;4BAEOP,E,EAAIS,Q,EAAUC,a,EAAe;AACnC,sBAAGb,IAAH,CAAQgB,OAAR,CAAgB,EAAEC,OAAO,EAAEd,MAAF,EAAT,EAAhB,EACGD,IADH,CACQ,UAACE,IAAD,EAAU;AACdQ,iBAASR,IAAT;AACD,OAHH,EAIGK,KAJH,CAIS;AAAA,eAASI,cAAcH,KAAd,CAAT;AAAA,OAJT;AAKD;;;4BAEMP,E,EAAIS,Q,EAAUC,a,EAAe;AAClC,sBAAGb,IAAH,CAAQkB,OAAR,CAAgB,EAAED,OAAO,EAAEd,MAAF,EAAT,EAAhB,EACGD,IADH,CACQ;AAAA,eAAeU,SAASO,WAAT,CAAf;AAAA,OADR,EAEGV,KAFH,CAES;AAAA,eAASI,cAAcH,KAAd,CAAT;AAAA,OAFT;AAGD;;;2BAGMP,E,EAAIiB,O,EAAStB,e,EAAiBe,a,EAAe;AAClD,sBAAGb,IAAH,CAAQqB,MAAR,CAAeD,OAAf,EAAwB;AACtBH,eAAO,EAAEd,MAAF,EADe;AAEtBmB,mBAAW;AAFW,OAAxB,EAIGpB,IAJH,CAIQ,gBAAkC;AAAA;AAAA,YAAhCqB,WAAgC;AAAA;AAAA,YAAlBC,WAAkB;;AACtC1B,wBAAgB0B,WAAhB,EAA6BD,WAA7B;AACD,OANH,EAOGd,KAPH,CAOS;AAAA,eAAOI,cAAcY,GAAd,CAAP;AAAA,OAPT;AAQD;;;;;;kBAGY,IAAI7B,WAAJ,E","file":"mealService.js","sourcesContent":["import db from '../../models/index';\r\n\r\nclass MealService {\r\n  create(mealObj, successCallBack, onError) {\r\n    db.Meal.create(mealObj)\r\n      .then(meal =>\r\n        successCallBack({\r\n          id: meal.id,\r\n          name: meal.name,\r\n          amount: meal.amount,\r\n          image: meal.image,\r\n          createdAt: meal.createdAt,\r\n        }))\r\n      .catch(error => onError(error));\r\n  }\r\n\r\n  getAll(limit, callback, errorCallback) {\r\n    db.Meal.findAll({ limit }).then((meals) => {\r\n      callback(meals);\r\n    }).catch(error => errorCallback(error));\r\n  }\r\n\r\n  getById(id, callback, errorCallback) {\r\n    db.Meal.findOne({ where: { id } })\r\n      .then((meal) => {\r\n        callback(meal);\r\n      })\r\n      .catch(error => errorCallback(error));\r\n  }\r\n\r\n  delete(id, callback, errorCallback) {\r\n    db.Meal.destroy({ where: { id } })\r\n      .then(deletedRows => callback(deletedRows))\r\n      .catch(error => errorCallback(error));\r\n  }\r\n\r\n\r\n  modify(id, newMeal, successCallBack, errorCallback) {\r\n    db.Meal.update(newMeal, {\r\n      where: { id },\r\n      returning: true,\r\n    })\r\n      .then(([updatedRows, [updatedMeal]]) => {\r\n        successCallBack(updatedMeal, updatedRows);\r\n      })\r\n      .catch(err => errorCallback(err));\r\n  }\r\n}\r\n\r\nexport default new MealService();\r\n"]}