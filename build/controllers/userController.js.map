{"version":3,"sources":["../../server/controllers/userController.js"],"names":["UserController","req","resp","errorCallback","err","name","status","json","success","message","successCallback","user","createToken","token","body","username","email","password","userType","userObj","toLowerCase","register","missingData","push","callback","data","console","log","find"],"mappings":"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","file":"userController.js","sourcesContent":["import userService from '../services/userService';\r\nimport authenticator from '../services/authenticaticator';\r\n\r\nclass UserController {\r\n  register(req, resp) {\r\n    // declaring callbacks\r\n    const errorCallback = (err) => {\r\n      if (err.name === 'SequelizeUniqueConstraintError') {\r\n        resp.status(412).json({\r\n          success: false,\r\n          message: 'Either the email or the username already exists',\r\n        });\r\n      } else {\r\n        resp.status(500).json({\r\n          success: false,\r\n          message: 'An unknown server error occured while processing your request',\r\n        });\r\n      }\r\n    };\r\n\r\n    const successCallback = (user) => {\r\n      if (user) {\r\n        authenticator.createToken(user, (err, token) => {\r\n          if (err) {\r\n            resp.status(500).json({\r\n              success: false,\r\n              message: 'An error occured while the server was processing your request....',\r\n            });\r\n          } else {\r\n            resp.status(201).json({\r\n              success: true,\r\n              user,\r\n              token,\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        errorCallback();\r\n      }\r\n    };\r\n    // processing request\r\n    const {\r\n      username, email, password, userType,\r\n    } = req.body;\r\n    const userObj = { username, email, password };\r\n\r\n    if (username && password && email && userType) {\r\n      if (userType.toLowerCase() === 'customer' || userType.toLowerCase() === 'caterer') {\r\n        userService.register(userObj, userType, successCallback, errorCallback);\r\n      } else {\r\n        resp.status(400).json({\r\n          success: false,\r\n          message: 'The userType value must be either caterer or customer',\r\n        });\r\n      }\r\n    } else {\r\n      const missingData = [];\r\n      if (!username) missingData.push('username');\r\n      if (!password) missingData.push('password');\r\n      if (!email) missingData.push('email');\r\n      if (!userType) missingData.push('userType');\r\n      resp.status(400).json({\r\n        success: false,\r\n        message: 'Some required fields are missing',\r\n        missingData,\r\n      });\r\n    }\r\n  }\r\n\r\n  login(req, resp) {\r\n    const callback = (userObj) => {\r\n      if (userObj) {\r\n        authenticator.createToken(userObj, (err, token) => {\r\n          if (err) {\r\n            resp.status(500).json({\r\n              success: false,\r\n              message: 'An error occured while the server was creating your token...',\r\n            });\r\n          } else {\r\n            resp.status(201).json({\r\n              success: true,\r\n              user: userObj,\r\n              token,\r\n            });\r\n          }\r\n        });\r\n      } else {\r\n        resp.status(404).json({\r\n          success: false,\r\n          data: 'The spcified username and password was not found in the database',\r\n        });\r\n      }\r\n    };\r\n\r\n    const errorCallback = (err) => {\r\n      console.log(err);\r\n      resp.status(500).json({\r\n        success: false,\r\n        message: 'Unknown Error',\r\n      });\r\n    };\r\n    const {\r\n      username, password, userType,\r\n    } = req.body;\r\n    if (username && password && userType) {\r\n      if (userType === 'customer' || userType === 'caterer') {\r\n        userService.find({\r\n          username,\r\n          password,\r\n        }, userType, callback, errorCallback);\r\n      } else {\r\n        resp.status(400).json({\r\n          success: false,\r\n          message: 'The userType value must be either caterer or customer',\r\n        });\r\n      }\r\n    } else {\r\n      const missingData = [];\r\n      if (!username) missingData.push('username');\r\n      if (!password) missingData.push('password');\r\n      if (!userType) missingData.push('userType');\r\n      resp.status(400).json({\r\n        success: false,\r\n        message: 'Some required fields are missing',\r\n        missingData,\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport default UserController;\r\n"]}