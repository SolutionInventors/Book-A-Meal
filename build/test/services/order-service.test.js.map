{"version":3,"sources":["../../../server/test/services/order-service.test.js"],"names":["Order","require","describe","orderarr","customer","date","anOrder","ObjreturnedbymakeOrder","makeOrder","it","isObject","isDefined","getAllMeals","validObj","isTrue","modify","getOrdersByDate","getOrderFromMealIdArr"],"mappings":";;AAAA;;;;AAEA;;;;AACA;;;;AAEA,IAAMA,QAAQC,QAAQ,oBAAR,CAAd;;AAEAC,SAAS,gBAAT,EAA2B,YAAM;AAC/B,MAAMC,WAAW,CAAC,OAAD,EAAU,IAAV,CAAjB;AACA,MAAMC,WAAW,WAAjB;AACA,MAAMC,OAAO,KAAb;;AAGA,MAAMC,UAAU,IAAIN,KAAJ,CAAUG,QAAV,EAAoBC,QAApB,EAA8BC,IAA9B,CAAhB;AACA,MAAME,yBAAyB,uBAAaC,SAAb,CAAuBF,OAAvB,CAA/B;;AAGAJ,WAAS,yBAAT,EAAoC,YAAM;AACxCO,OAAG,qCAAH,EAA0C,YAAM;AAC9C,mBAAOC,QAAP;AACD,KAFD;;AAIAD,OAAG,oCAAH,EAAyC,YAAM;AAC7C,mBAAOE,SAAP,CAAiB,uBAAaC,WAAb,EAAjB;AACD,KAFD;;AAKAH,OAAG,+CAAH,EAAoD,YAAM;AACxD,mBAAOE,SAAP,CAAiBE,QAAjB;AACD,KAFD;AAGAX,aAAS,8CAAT,EAAyD,YAAM;AAC7DO,SAAG,+BAAH,EAAoC,YAAM;AACxC,qBAAOE,SAAP,CAAiBJ,sBAAjB;AACD,OAFD;;AAKAE,wDAAgDN,QAAhD,EAA4D,YAAM;AAChE,qBAAOW,MAAP,CAAcP,uBAAuBJ,QAAvB,IAAmCA,QAAjD;AACD,OAFD;;AAIAM,sDAA8CL,QAA9C,EAA0D,YAAM;AAC9D,qBAAOU,MAAP,CAAcP,uBAAuBH,QAAvB,IAAmCA,QAAjD;AACD,OAFD;AAGAK,2DAAmDJ,IAAnD,EAA2D,YAAM;AAC/D,qBAAOS,MAAP,CAAcP,uBAAuBF,IAAvB,IAA+BA,IAA7C;AACD,OAFD;AAGD,KAhBD;AAiBD,GA9BD;;AAgCAH,WAAS,2BAAT,EAAsC,YAAM;AAC1CO,OAAG,+CAAH,EAAoD,YAAM;AACxD,mBAAOE,SAAP,CAAiB,uBAAaH,SAAb,EAAjB;AACD,KAFD;;AAIAC,OAAG,+BAAH,EAAoC,YAAM;AACxC,mBAAOE,SAAP,CAAiB,uBAAaI,MAAb,EAAjB;AACD,KAFD;;AAIAN,OAAG,8BAAH,EAAmC,YAAM;AACvC,mBAAOE,SAAP,CAAiB,uBAAaK,eAAb,EAAjB;AACD,KAFD;;AAKAP,OAAG,gCAAH,EAAqC,YAAM;AACzC,mBAAOE,SAAP,CAAiB,uBAAaM,qBAAb,EAAjB;AACD,KAFD;AAGD,GAjBD;AAkBD,CA5DD","file":"order-service.test.js","sourcesContent":["import orderService from '../../services/order-service';\r\n\r\nimport menuService from '../services/menu';\r\nimport { assert } from 'chai';\r\n\r\nconst Order = require('../../models/Order');\r\n\r\ndescribe('order-services', () => {\r\n  const orderarr = ['item1', 'fh'];\r\n  const customer = 'customer1';\r\n  const date = 'chi';\r\n\r\n\r\n  const anOrder = new Order(orderarr, customer, date);\r\n  const ObjreturnedbymakeOrder = orderService.makeOrder(anOrder);\r\n\r\n\r\n  describe('valid order object test', () => {\r\n    it('checks if created item is an object', () => {\r\n      assert.isObject(orderService);\r\n    });\r\n\r\n    it('should return all the orders in db', () => {\r\n      assert.isDefined(orderService.getAllMeals());\r\n    });\r\n\r\n\r\n    it('should create a new order using values passed', () => {\r\n      assert.isDefined(validObj);\r\n    });\r\n    describe('get by name and id and their respective test', () => {\r\n      it('testing return value for name', () => {\r\n        assert.isDefined(ObjreturnedbymakeOrder);\r\n      });\r\n\r\n\r\n      it(`expects returned value to have an name of ${orderarr}`, () => {\r\n        assert.isTrue(ObjreturnedbymakeOrder.orderarr == orderarr);\r\n      });\r\n\r\n      it(`expects returned value to have a name of${customer}`, () => {\r\n        assert.isTrue(ObjreturnedbymakeOrder.customer == customer);\r\n      });\r\n      it(`expects returned value to have a password of ${date}`, () => {\r\n        assert.isTrue(ObjreturnedbymakeOrder.date == date);\r\n      });\r\n    });\r\n  });\r\n\r\n  describe('invalid order object test', () => {\r\n    it('should create a new order using values passed', () => {\r\n      assert.isDefined(orderService.makeOrder());\r\n    });\r\n\r\n    it('testing return value for name', () => {\r\n      assert.isDefined(orderService.modify());\r\n    });\r\n\r\n    it('should find a order using ID', () => {\r\n      assert.isDefined(orderService.getOrdersByDate());\r\n    });\r\n\r\n\r\n    it('should delete a order using ID', () => {\r\n      assert.isDefined(orderService.getOrderFromMealIdArr());\r\n    });\r\n  });\r\n});\r\n"]}