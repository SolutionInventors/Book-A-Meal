{"version":3,"sources":["../../../server/test/services/caterer-service.test.js"],"names":["catererservice","require","assert","Caterer","describe","email","name","pass","caterer","createdObj","registercaterer","ObjreturnedbyCatererNameandPass","getCaterer","ObjreturnedbyCatererName","getcatererByName","it","isObject","isDefined","isTrue","password","invalidObj"],"mappings":";;AAAA,IAAMA,iBAAiBC,QAAQ,gCAAR,CAAvB;AACA,IAAMC,SAASD,QAAQ,MAAR,EAAgBC,MAA/B;;AAEA,IAAMC,UAAUF,QAAQ,sBAAR,CAAhB;;AAEAG,SAAS,iBAAT,EAA4B,YAAM;AAChCA,WAAS,6BAAT,EAAwC,YAAM;AAC5C,QAAMC,QAAQ,OAAd;AACA,QAAMC,OAAO,KAAb;AACA,QAAMC,OAAO,UAAb;AACA,QAAMC,UAAU,IAAIL,OAAJ,CAAYG,IAAZ,EAAkBD,KAAlB,EAAyBE,IAAzB,CAAhB;AACA,QAAME,aAAaT,eAAeU,eAAf,CAA+BF,OAA/B,CAAnB;AACA,QAAMG,kCAAkCX,eAAeY,UAAf,CAA0BN,IAA1B,EAAgCC,IAAhC,CAAxC;AACA,QAAMM,2BAA2Bb,eAAec,gBAAf,CAAgCR,IAAhC,CAAjC;;AAEAS,OAAG,sCAAH,EAA2C,YAAM;AAC/Cb,aAAOc,QAAP,CAAgBhB,cAAhB;AAED,KAHD;;AAMAe,OAAG,+BAAH,EAAoC,YAAM;AACxCb,aAAOe,SAAP,CAAiBR,UAAjB;AAED,KAHD;;AAMAM,OAAG,uDAAH,EAA4D,YAAM;AAChEb,aAAOe,SAAP,CAAiBN,+BAAjB;AAED,KAHD;;AAKAI,OAAG,qDAAH,EAA0D,YAAM;AAC9Db,aAAOe,SAAP,CAAiBJ,wBAAjB;AAED,KAHD;;AAMAE,uDAAiDV,KAAjD,EAA0D,YAAM;AAC9DH,aAAOgB,MAAP,CAAcL,yBAAyBR,KAAzB,IAAkCA,KAAhD;AACD,KAFD;;AAIAU,oDAA8CT,IAA9C,EAAsD,YAAM;AAC1DJ,aAAOgB,MAAP,CAAcL,yBAAyBP,IAAzB,IAAiCA,IAA/C;AACD,KAFD;AAGAS,yDAAmDR,IAAnD,EAA2D,YAAM;AAC/DL,aAAOgB,MAAP,CAAcL,yBAAyBM,QAAzB,IAAqCZ,IAAnD;AACD,KAFD;;AAKAQ,uDAAiDV,KAAjD,EAA0D,YAAM;AAC9DH,aAAOgB,MAAP,CAAcP,gCAAgCN,KAAhC,IAAyCA,KAAvD;AACD,KAFD;;AAIAU,oDAA8CT,IAA9C,EAAsD,YAAM;AAC1DJ,aAAOgB,MAAP,CAAcP,gCAAgCL,IAAhC,IAAwCA,IAAtD;AACD,KAFD;AAGAS,yDAAmDR,IAAnD,EAA2D,YAAM;AAC/DL,aAAOgB,MAAP,CAAcP,gCAAgCQ,QAAhC,IAA4CZ,IAA1D;AACD,KAFD;AAMD,GAzDD;;AA2DAH,WAAS,eAAT,EAA0B,YAAM;AAC9B,QAAMgB,aAAapB,eAAeU,eAAf,EAAnB;;AAEAK,OAAG,uCAAH,EAA4C,YAAM;AAChDb,aAAOc,QAAP,CAAgBI,UAAhB;AAED,KAHD;;AAKAL,OAAG,+BAAH,EAAoC,YAAM;AACxCb,aAAOe,SAAP,CAAiBG,WAAWd,IAA5B;AAED,KAHD;AAID,GAZD;AAaD,CAzED","file":"caterer-service.test.js","sourcesContent":["const catererservice = require('../../services/caterer-service');\r\nconst assert = require('chai').assert;\r\n\r\nconst Caterer = require('../../models/Caterer');\r\n\r\ndescribe('caterer-servics', () => {\r\n  describe('Valid registerCaterer call ', () => {\r\n    const email = 'email';\r\n    const name = 'chi';\r\n    const pass = 'password';\r\n    const caterer = new Caterer(name, email, pass);\r\n    const createdObj = catererservice.registercaterer(caterer);\r\n    const ObjreturnedbyCatererNameandPass = catererservice.getCaterer(name, pass);\r\n    const ObjreturnedbyCatererName = catererservice.getcatererByName(name);\r\n\r\n    it('expects creted value to be an object', () => {\r\n      assert.isObject(catererservice);\r\n\r\n    });\r\n\r\n\r\n    it('expects item to be registered', () => {\r\n      assert.isDefined(createdObj);\r\n\r\n    });\r\n\r\n\r\n    it('expects item to return caterer when name call is used', () => {\r\n      assert.isDefined(ObjreturnedbyCatererNameandPass);\r\n\r\n    });\r\n\r\n    it('expects to be a caterer when aName and Pass is used', () => {\r\n      assert.isDefined(ObjreturnedbyCatererName);\r\n\r\n    });\r\n\r\n\r\n    it(`expects returned value to have an email of ${email}`, () => {\r\n      assert.isTrue(ObjreturnedbyCatererName.email == email);\r\n    });\r\n\r\n    it(`expects returned value to have a name of${name}`, () => {\r\n      assert.isTrue(ObjreturnedbyCatererName.name == name);\r\n    });\r\n    it(`expects returned value to have a password of ${pass}`, () => {\r\n      assert.isTrue(ObjreturnedbyCatererName.password == pass);\r\n    });\r\n\r\n\r\n    it(`expects returned value to have an email of ${email}`, () => {\r\n      assert.isTrue(ObjreturnedbyCatererNameandPass.email == email);\r\n    });\r\n\r\n    it(`expects returned value to have a name of${name}`, () => {\r\n      assert.isTrue(ObjreturnedbyCatererNameandPass.name == name);\r\n    });\r\n    it(`expects returned value to have a password of ${pass}`, () => {\r\n      assert.isTrue(ObjreturnedbyCatererNameandPass.password == pass);\r\n    });\r\n\r\n\r\n\r\n  });\r\n\r\n  describe('Invalid call ', () => {\r\n    const invalidObj = catererservice.registercaterer();\r\n\r\n    it('expects created value to be an object', () => {\r\n      assert.isObject(invalidObj);\r\n\r\n    });\r\n\r\n    it('expects item to be registered', () => {\r\n      assert.isDefined(invalidObj.name);\r\n\r\n    });\r\n  });\r\n});\r\n"]}