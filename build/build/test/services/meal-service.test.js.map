{"version":3,"sources":["../../../server/test/services/meal-service.test.js"],"names":["describe","name","amount","image","theMeal","validObj","createMeal","getNameObj","getByName","getByIDObj","getMealById","id","it","isObject","isDefined","getAllMeals","isTrue","delete","undefined"],"mappings":";;AAAA;;;;AACA;;AAEA;;;;;;AAEAA,SAAS,eAAT,EAA0B,YAAM;AAC9B,MAAMC,OAAO,OAAb;AACA,MAAMC,SAAS,QAAf;AACA,MAAMC,QAAQ,QAAd;AACA,MAAMC,UAAU,mBAASH,IAAT,EAAeC,MAAf,EAAuBC,KAAvB,CAAhB;AACA,MAAME,WAAW,sBAAYC,UAAZ,CAAuBF,OAAvB,CAAjB;AACA,MAAMG,aAAa,sBAAYC,SAAZ,CAAsBP,IAAtB,CAAnB;AACA,MAAMQ,aAAa,sBAAYC,WAAZ,CAAwBL,SAASM,EAAjC,CAAnB;;AAEAX,WAAS,wBAAT,EAAmC,YAAM;AACvCY,OAAG,qCAAH,EAA0C,YAAM;AAC9C,mBAAOC,QAAP;AACD,KAFD;;AAIAD,OAAG,mCAAH,EAAwC,YAAM;AAC5C,mBAAOE,SAAP,CAAiB,sBAAYC,WAAZ,EAAjB;AACD,KAFD;;AAKAH,OAAG,8CAAH,EAAmD,YAAM;AACvD,mBAAOE,SAAP,CAAiBT,QAAjB;AACD,KAFD;;AAIAL,aAAS,8CAAT,EAAyD,YAAM;AAC7DY,SAAG,+BAAH,EAAoC,YAAM;AACxC,qBAAOE,SAAP,CAAiBP,UAAjB;AACD,OAFD;;AAKAK,wDAAgDX,IAAhD,EAAwD,YAAM;AAC5D,qBAAOe,MAAP,CAAcT,WAAWN,IAAX,IAAmBA,IAAjC;AACD,OAFD;;AAIAW,sDAA8CV,MAA9C,EAAwD,YAAM;AAC5D,qBAAOc,MAAP,CAAcT,WAAWL,MAAX,IAAqBA,MAAnC;AACD,OAFD;AAGAU,2DAAmDT,KAAnD,EAA4D,YAAM;AAChE,qBAAOa,MAAP,CAAcT,WAAWJ,KAAX,IAAoBA,KAAlC;AACD,OAFD;;AAKAS,SAAG,+BAAH,EAAoC,YAAM;AACxC,qBAAOE,SAAP,CAAiBL,UAAjB;AACD,OAFD;;AAKAG,wDAAgDX,IAAhD,EAAwD,YAAM;AAC5D,qBAAOe,MAAP,CAAcP,WAAWR,IAAX,IAAmBA,IAAjC;AACD,OAFD;;AAIAW,sDAA8CV,MAA9C,EAAwD,YAAM;AAC5D,qBAAOc,MAAP,CAAcP,WAAWP,MAAX,IAAqBA,MAAnC;AACD,OAFD;AAGAU,2DAAmDT,KAAnD,EAA4D,YAAM;AAChE,qBAAOa,MAAP,CAAcP,WAAWN,KAAX,IAAoBA,KAAlC;AACD,OAFD;AAGD,KAjCD;AAkCAS,OAAG,6BAAH,EAAkC,YAAM;AACtC,mBAAOE,SAAP,CAAiBL,UAAjB;AACD,KAFD;AAGAG,OAAG,+BAAH,EAAoC,YAAM;AACxC,mBAAOE,SAAP,CAAiB,sBAAYG,MAAZ,CAAmBZ,SAASM,EAA5B,CAAjB;AACD,KAFD;AAGD,GAtDD;;AAwDAX,WAAS,0BAAT,EAAqC,YAAM;AACzCY,OAAG,8CAAH,EAAmD,YAAM;AACvD,mBAAOE,SAAP,CAAiB,sBAAYR,UAAZ,EAAjB;AACD,KAFD;;AAIAM,OAAG,+BAAH,EAAoC,YAAM;AACxC,mBAAOE,SAAP,CAAiB,sBAAYN,SAAZ,EAAjB;AACD,KAFD;;AAIAI,OAAG,6BAAH,EAAkC,YAAM;AACtC,mBAAOE,SAAP,CAAiB,sBAAYJ,WAAZ,EAAjB;AACD,KAFD;;AAKAE,OAAG,+BAAH,EAAoC,YAAM;AACxC,mBAAOE,SAAP,CAAiB,sBAAYG,MAAZ,CAAmBC,SAAnB,CAAjB;AACD,KAFD;AAGD,GAjBD;AAkBD,CAnFD","file":"meal-service.test.js","sourcesContent":["import mealService from '../../services/meal-service';\r\nimport { assert } from 'chai';\r\n\r\nimport Meal from '../../models/Meal';\r\n\r\ndescribe('meal-services', () => {\r\n  const name = 'name1';\r\n  const amount = 'amount';\r\n  const image = 'image1';\r\n  const theMeal = new Meal(name, amount, image);\r\n  const validObj = mealService.createMeal(theMeal);\r\n  const getNameObj = mealService.getByName(name);\r\n  const getByIDObj = mealService.getMealById(validObj.id);\r\n\r\n  describe('valid meal object test', () => {\r\n    it('checks if created item is an object', () => {\r\n      assert.isObject(mealService);\r\n    });\r\n\r\n    it('should return all the meals in db', () => {\r\n      assert.isDefined(mealService.getAllMeals());\r\n    });\r\n\r\n\r\n    it('should create a new meal using values passed', () => {\r\n      assert.isDefined(validObj);\r\n    });\r\n\r\n    describe('get by name and id and their respective test', () => {\r\n      it('testing return value for name', () => {\r\n        assert.isDefined(getNameObj);\r\n      });\r\n\r\n\r\n      it(`expects returned value to have an name of ${name}`, () => {\r\n        assert.isTrue(getNameObj.name == name);\r\n      });\r\n\r\n      it(`expects returned value to have a name of${amount}`, () => {\r\n        assert.isTrue(getNameObj.amount == amount);\r\n      });\r\n      it(`expects returned value to have a password of ${image}`, () => {\r\n        assert.isTrue(getNameObj.image == image);\r\n      });\r\n\r\n\r\n      it('testing return value for name', () => {\r\n        assert.isDefined(getByIDObj);\r\n      });\r\n\r\n\r\n      it(`expects returned value to have an name of ${name}`, () => {\r\n        assert.isTrue(getByIDObj.name == name);\r\n      });\r\n\r\n      it(`expects returned value to have a name of${amount}`, () => {\r\n        assert.isTrue(getByIDObj.amount == amount);\r\n      });\r\n      it(`expects returned value to have a password of ${image}`, () => {\r\n        assert.isTrue(getByIDObj.image == image);\r\n      });\r\n    });\r\n    it('should find a meal using ID', () => {\r\n      assert.isDefined(getByIDObj);\r\n    });\r\n    it('should delete a meal using ID', () => {\r\n      assert.isDefined(mealService.delete(validObj.id));\r\n    });\r\n  });\r\n\r\n  describe('invalid meal object test', () => {\r\n    it('should create a new meal using values passed', () => {\r\n      assert.isDefined(mealService.createMeal());\r\n    });\r\n\r\n    it('testing return value for name', () => {\r\n      assert.isDefined(mealService.getByName());\r\n    });\r\n\r\n    it('should find a meal using ID', () => {\r\n      assert.isDefined(mealService.getMealById());\r\n    });\r\n\r\n\r\n    it('should delete a meal using ID', () => {\r\n      assert.isDefined(mealService.delete(undefined));\r\n    });\r\n  });\r\n});\r\n"]}