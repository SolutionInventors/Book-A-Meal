{"version":3,"sources":["../../server/controllers/mealController.js"],"names":["MealController","req","resp","user","caterer","status","json","success","message","limit","body","serverErrorCallback","getAll","meals","length","userType","id","params","successfunc","meal","getById","name","amount","image","mealObj","errorCallback","error","data","Number","isNaN","isFinite","create","missingData","push","deletedObj","notFound","delete","newMealObj","updatedMeal","console","log","err","modify"],"mappings":"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","file":"mealController.js","sourcesContent":["import mealService from '../services/mealService';\r\n\r\nexport default class MealController {\r\n  getAll(req, resp) {\r\n    if (!req.user.caterer) {\r\n      resp.status(401).json({\r\n        success: false,\r\n        message: 'Only Caterers are permitted here',\r\n      });\r\n      return;\r\n    }\r\n    const limit = req.body.limit ? req.body.limit : 100;\r\n    const serverErrorCallback = () => {\r\n      resp.status(500).json({\r\n        success: false,\r\n        message: 'An unknown error occured in the server',\r\n      });\r\n    };\r\n    mealService.getAll(limit, (meals) => {\r\n      if (meals.length > 0) {\r\n        resp.json({\r\n          success: true,\r\n          meals,\r\n        });\r\n      } else {\r\n        resp.status(204).json({\r\n          success: true,\r\n          message: 'There are no available meals in the database',\r\n        });\r\n      }\r\n    }, serverErrorCallback);\r\n  }\r\n  getById(req, resp) {\r\n    if (req.user.userType !== 'caterer') {\r\n      resp.status(409).json({\r\n        success: false,\r\n        message: 'Only Caterers are permitted here',\r\n      });\r\n      return;\r\n    }\r\n    const { params: { id } } = req;\r\n    const successfunc = (meal) => {\r\n      if (meal) {\r\n        resp.status(200).json({\r\n          success: true,\r\n          meal,\r\n        });\r\n      } else {\r\n        resp.status(404).json({\r\n          success: false,\r\n          message: 'The inputed id does not exist',\r\n        });\r\n      }\r\n    };\r\n\r\n\r\n    if (id) {\r\n      const serverErrorCallback = () => {\r\n        resp.status(500).json({\r\n          success: false,\r\n          message: 'An unknown error occured in the server',\r\n        });\r\n      };\r\n      mealService.getById(id, successfunc, serverErrorCallback);\r\n    } else {\r\n      resp.status(400).json({\r\n        success: false,\r\n        message: 'Missing id',\r\n      });\r\n    }\r\n  }\r\n\r\n  create(req, resp) {\r\n    if (!req.user.caterer) {\r\n      resp.status(409).json({\r\n        success: false,\r\n        message: 'Only Caterers are permitted here',\r\n      });\r\n      return;\r\n    }\r\n    const { name, amount, image } = req.body;\r\n    if (name && amount && image) {\r\n      const mealObj = { name, amount, image };\r\n\r\n      const errorCallback = (error) => {\r\n        if (error.name === 'SequelizeUniqueConstraintError') {\r\n          resp.status(409).json({\r\n            success: false,\r\n            message: 'The meal name is already in the database',\r\n          });\r\n        } else {\r\n          resp.status(500).json({\r\n            success: false,\r\n            message: 'An unknown error occured while processing your request',\r\n          });\r\n        }\r\n      };\r\n\r\n      const success = (meal) => {\r\n        resp.status(201).json({\r\n          success: true,\r\n          data: meal,\r\n        });\r\n      };\r\n      if (Number.isNaN(+name) && Number.isFinite(+amount)) {\r\n        mealService.create(mealObj, success, errorCallback);\r\n      } else {\r\n        resp.status(404).json({\r\n          success: false,\r\n          message: 'The format of the inputed values is invalid. Ensure that amount is a number and name is a valid string',\r\n        });\r\n      }\r\n    } else {\r\n      const missingData = [];\r\n      if (!name) missingData.push('name');\r\n      if (!amount) missingData.push('amount');\r\n      if (!image) missingData.push('image');\r\n      resp.status(400).json({\r\n        success: false,\r\n        message: 'Some required data is missing in the body',\r\n        missingData,\r\n      });\r\n    }\r\n  }\r\n\r\n\r\n  delete(req, resp) {\r\n    if (!req.user.caterer) {\r\n      resp.status(409).json({\r\n        success: false,\r\n        message: 'Only Caterers are permitted here',\r\n      });\r\n      return;\r\n    }\r\n    const { params: { id } } = req;\r\n    if (id) {\r\n      const success = (deletedObj) => {\r\n        resp.status(200).json({\r\n          success: true,\r\n          data: deletedObj,\r\n        });\r\n      };\r\n      const notFound = () => {\r\n        resp.status(404).json({\r\n          success: false,\r\n          message: 'There is no meal with the specified id',\r\n        });\r\n      };\r\n      mealService.delete(id, success, notFound);\r\n    } else {\r\n      resp.status(400).json({\r\n        success: false,\r\n        message: 'No meal id was specified',\r\n        missingData: ['id'],\r\n      });\r\n    }\r\n  }\r\n\r\n  modify(req, resp) {\r\n    if (!req.user.caterer) {\r\n      resp.status(409).json({\r\n        success: false,\r\n        message: 'Only Caterers are permitted here',\r\n      });\r\n      return;\r\n    }\r\n    const { name, amount, image } = req.body;\r\n    const { params: { id } } = req;\r\n    if (name && amount && image) {\r\n      if (id) {\r\n        const newMealObj = { name, amount, image };\r\n        const success = (updatedMeal) => {\r\n          console.log(updatedMeal);\r\n          if (updatedMeal) {\r\n            resp.status(201).json({\r\n              success: true,\r\n              data: updatedMeal,\r\n            });\r\n          } else {\r\n            resp.status(404).json({\r\n              success: false,\r\n              message: 'The id you specified does not exist',\r\n            });\r\n          }\r\n        };\r\n        const serverErrorCallback = (err) => {\r\n          if (err.name === 'SequelizeDatabaseError') {\r\n            resp.status(500).json({\r\n              success: false,\r\n              message: 'The id you specified is not a UUID',\r\n            });\r\n          } else if (err.name === 'SequelizeUniqueConstraintError') {\r\n            resp.status(409).json({\r\n              success: false,\r\n              message: 'The meal name is already in the database',\r\n            });\r\n          } else {\r\n            resp.status(500).json({\r\n              success: false,\r\n              message: 'An unknown error occured while processing your request',\r\n            });\r\n          }\r\n        };\r\n        mealService.modify(id, newMealObj, success, serverErrorCallback);\r\n      } else {\r\n        resp.status(400).json({\r\n          success: false,\r\n          message: 'Meal id is missing',\r\n        });\r\n      }\r\n    } else {\r\n      const missingData = [];\r\n      if (!name) {\r\n        missingData.push('name');\r\n      } else if (!amount) {\r\n        missingData.push('amount');\r\n      } else if (!image) {\r\n        missingData.push('image');\r\n      }\r\n      resp.status(400).json({\r\n        success: true,\r\n        message: 'Some required data are missing',\r\n        missingData,\r\n      });\r\n    }\r\n  }\r\n}\r\n"]}