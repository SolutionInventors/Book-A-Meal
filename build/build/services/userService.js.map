{"version":3,"sources":["../../server/services/userService.js"],"names":["UserService","userObj","userType","successCallback","errorCallback","Customer","create","then","obj","customer","username","email","id","catch","err","Caterer","caterer","callback","whereObj","password","attributes","findOne","where","error"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEMA,W;;;;;;;6BACKC,O,EAASC,Q,EAAUC,e,EAAiBC,a,EAAe;AAC1D,UAAIF,aAAa,UAAjB,EAA6B;AAC3B,wBAASG,QAAT,CAAkBC,MAAlB,CAAyBL,OAAzB,EACGM,IADH,CACQ,UAACC,GAAD,EAAS;AACb,cAAMC,WAAW;AACfC,sBAAUF,IAAIE,QADC;AAEfC,mBAAOH,IAAIG,KAFI;AAGfC,gBAAIJ,IAAII,EAHO;AAIfV;AAJe,WAAjB;AAMAC,0BAAgB,EAAEM,kBAAF,EAAhB;AACD,SATH,EAUGI,KAVH,CAUS;AAAA,iBAAOT,cAAcU,GAAd,CAAP;AAAA,SAVT;AAWD,OAZD,MAYO;AACL,wBAASC,OAAT,CAAiBT,MAAjB,CAAwBL,OAAxB,EACGM,IADH,CACQ,UAACC,GAAD,EAAS;AACb,cAAMQ,UAAU;AACdN,sBAAUF,IAAIE,QADA;AAEdC,mBAAOH,IAAIG,KAFG;AAGdC,gBAAIJ,IAAII,EAHM;AAIdV;AAJc,WAAhB;AAMAC,0BAAgB,EAAEa,gBAAF,EAAhB;AACD,SATH,EAUGH,KAVH,CAUS;AAAA,iBAAOT,cAAcU,GAAd,CAAP;AAAA,SAVT;AAWD;AACF;;;yBAGIb,O,EAASC,Q,EAAUe,Q,EAAUb,a,EAAe;AAC/C,UAAMc,WAAW,EAAER,UAAUT,QAAQS,QAApB,EAA8BS,UAAUlB,QAAQkB,QAAhD,EAAjB;AACA,UAAMC,aAAa,CAAC,IAAD,EAAO,UAAP,EAAmB,OAAnB,CAAnB;AACA,UAAIlB,aAAa,SAAjB,EAA4B;AAC1B,wBAASa,OAAT,CAAiBM,OAAjB,CAAyB;AACvBC,iBAAOJ,QADgB;AAEvBE;AAFuB,SAAzB,EAIGb,IAJH,CAIQ,UAACS,OAAD,EAAa;AACjB,cAAIA,OAAJ,EAAa;AACXC,qBAAS,EAAED,gBAAF,EAAT;AACD;AACDC;AACD,SATH,EAUGJ,KAVH,CAUS;AAAA,iBAAST,cAAcmB,KAAd,CAAT;AAAA,SAVT;AAWD,OAZD,MAYO;AACL,wBAASlB,QAAT,CAAkBgB,OAAlB,CAA0B;AACxBC,iBAAOJ,QADiB;AAExBE;AAFwB,SAA1B,EAIGb,IAJH,CAIQ,UAACE,QAAD,EAAc;AAClB,cAAIA,QAAJ,EAAc;AACZQ,qBAAS,EAAER,kBAAF,EAAT;AACD;AACDQ;AACD,SATH,EAUGJ,KAVH,CAUS;AAAA,iBAAST,cAAcmB,KAAd,CAAT;AAAA,SAVT;AAWD;AACF;;;;;;kBAGY,IAAIvB,WAAJ,E","file":"userService.js","sourcesContent":["import database from '../../models/index';\r\n\r\nclass UserService {\r\n  register(userObj, userType, successCallback, errorCallback) {\r\n    if (userType === 'customer') {\r\n      database.Customer.create(userObj)\r\n        .then((obj) => {\r\n          const customer = {\r\n            username: obj.username,\r\n            email: obj.email,\r\n            id: obj.id,\r\n            userType,\r\n          };\r\n          successCallback({ customer });\r\n        })\r\n        .catch(err => errorCallback(err));\r\n    } else {\r\n      database.Caterer.create(userObj)\r\n        .then((obj) => {\r\n          const caterer = {\r\n            username: obj.username,\r\n            email: obj.email,\r\n            id: obj.id,\r\n            userType,\r\n          };\r\n          successCallback({ caterer });\r\n        })\r\n        .catch(err => errorCallback(err));\r\n    }\r\n  }\r\n\r\n\r\n  find(userObj, userType, callback, errorCallback) {\r\n    const whereObj = { username: userObj.username, password: userObj.password };\r\n    const attributes = ['id', 'username', 'email'];\r\n    if (userType === 'caterer') {\r\n      database.Caterer.findOne({\r\n        where: whereObj,\r\n        attributes,\r\n      })\r\n        .then((caterer) => {\r\n          if (caterer) {\r\n            callback({ caterer });\r\n          }\r\n          callback();\r\n        })\r\n        .catch(error => errorCallback(error));\r\n    } else {\r\n      database.Customer.findOne({\r\n        where: whereObj,\r\n        attributes,\r\n      })\r\n        .then((customer) => {\r\n          if (customer) {\r\n            callback({ customer });\r\n          }\r\n          callback();\r\n        })\r\n        .catch(error => errorCallback(error));\r\n    }\r\n  }\r\n}\r\n\r\nexport default new UserService();\r\n"]}