{"version":3,"sources":["../../server/services/menuService.js"],"names":["MenuService","mealsIdArr","successCallBack","noValidId","alreadyCreated","Meal","findAll","where","id","attributes","then","meals","length","Menu","create","dateCreated","Date","toDateString","todayMenu","addMeals","catch","error","callBack","menuNotSet","date","findOne","include","model","through","foreignKey","as","menu","callback","noMenuCallback","errorHandler","setMeals","createdAt","MenuMeal","menuId","menuMeals","whereArr","map","menuMeal","mealId"],"mappings":"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","file":"menuService.js","sourcesContent":["import database from '../../models/index';\r\n\r\nclass MenuService {\r\n  createTodayMenu(mealsIdArr, successCallBack, noValidId, alreadyCreated) {\r\n    database.Meal.findAll({\r\n      where: { id: mealsIdArr },\r\n      attributes: ['id', 'amount', 'name', 'image'],\r\n    }).then((meals) => {\r\n      if (meals && meals.length > 0) {\r\n        database.Menu.create({ dateCreated: new Date().toDateString() })\r\n          .then(todayMenu =>\r\n            todayMenu.addMeals(meals)\r\n              .then(() => successCallBack(todayMenu, meals)))\r\n          .catch(error => alreadyCreated(error));\r\n      } else {\r\n        noValidId();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  getMenu(callBack, menuNotSet, date = new Date()) {\r\n    database.Menu.findOne({\r\n      where: { dateCreated: date.toDateString() },\r\n      include: [{\r\n        model: database.Meal,\r\n        through: {\r\n          foreignKey: 'mealId',\r\n          attributes: [],\r\n        },\r\n        attributes: ['id', 'amount', 'name', 'image'],\r\n        as: 'meals',\r\n      }],\r\n    }).then((menu) => {\r\n      if (menu) callBack(menu);\r\n      else {\r\n        menuNotSet();\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  updateTodayMenu(mealsIdArr, callback, noMenuCallback, noValidId, errorHandler) {\r\n    database.Meal.findAll({\r\n      where: { id: mealsIdArr },\r\n      attributes: ['id', 'amount', 'name', 'image'],\r\n    }).then((meals) => {\r\n      if (meals.length > 0) {\r\n        database.Menu.findOne({\r\n          where: { dateCreated: new Date().toDateString() },\r\n        }).then((todayMenu) => {\r\n          if (todayMenu) {\r\n            todayMenu.setMeals(meals)\r\n              .then(() => {\r\n                callback(todayMenu, meals);\r\n              });\r\n          } else {\r\n            noValidId();\r\n          }\r\n        }).catch(error => errorHandler(error));\r\n      } else {\r\n        noValidId();\r\n      }\r\n    });\r\n  }\r\n\r\n  retrieve(callback, noMenuCallback) {\r\n    database.Menu.findOne({\r\n      attributes: ['id', 'createdAt'],\r\n      where: { createdAt: new Date() },\r\n      include: [{\r\n        model: database.Meal,\r\n        through: {\r\n          foreignKey: 'mealId',\r\n          attributes: ['id', 'name'],\r\n        },\r\n        as: 'meals',\r\n      }],\r\n    }).then((menu) => {\r\n      if (!menu) noMenuCallback();\r\n      else {\r\n        database.MenuMeal.findAll({\r\n          where: { menuId: menu.id },\r\n        }).then((menuMeals) => {\r\n          const whereArr = menuMeals.map(menuMeal => menuMeal.mealId);\r\n          database.Meal.findAll({\r\n            where: { mealId: whereArr },\r\n            attributes: ['id', 'name', 'amount', 'image'],\r\n          }).then((meals) => {\r\n            callback(menu, meals);\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n}\r\nexport default new MenuService();\r\n\r\n"]}