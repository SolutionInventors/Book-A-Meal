{"version":3,"sources":["../../server/services/orderService.js"],"names":["OrderService","mealsIdArr","customerId","successCallBack","noValidId","noMenu","erroCallback","Menu","findOne","where","dateCreated","Date","toDateString","includes","model","Meal","through","as","id","then","todayMenu","getMeals","meals","length","Order","create","order","addMeals","catch","error","callback","errorCallback","date","findAll","attributes","include","orders","errorHandler","orderId","Meals","setMeals"],"mappings":"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","file":"orderService.js","sourcesContent":["import database from '../../models/index';\r\n\r\nclass OrderService {\r\n  makeOrder(mealsIdArr, customerId, successCallBack, noValidId, noMenu, erroCallback) {\r\n    database.Menu.findOne({\r\n      where: { dateCreated: new Date().toDateString() },\r\n      includes: [{\r\n        model: database.Meal,\r\n        through: 'menuId',\r\n        as: 'meals',\r\n        where: { id: mealsIdArr },\r\n      }],\r\n    }).then((todayMenu) => {\r\n      if (todayMenu) {\r\n        todayMenu.getMeals().then((meals) => {\r\n          if (meals.length > 0) {\r\n            database.Order.create({\r\n              customerId,\r\n            }).then((order) => {\r\n              order.addMeals(meals)\r\n                .then(() => successCallBack(order, meals));\r\n            });\r\n          } else {\r\n            noValidId();\r\n          }\r\n        });\r\n\r\n        successCallBack(todayMenu);\r\n      } else {\r\n        noMenu();\r\n      }\r\n    }).catch(error => erroCallback(error));\r\n  }\r\n\r\n  getOrdersByDate(callback, errorCallback, date = new Date()) {\r\n    database.Order.findAll({\r\n      attributes: [['id', 'orderId']],\r\n      include: [{\r\n        model: database.Meal,\r\n        through: 'orderId',\r\n        as: 'meals',\r\n      }],\r\n      where: { dateCreated: date.toDateString() },\r\n    }).then((orders) => {\r\n      callback(orders);\r\n    }).catch(error => errorCallback(error));\r\n  }\r\n\r\n  getById(id, callback, errorHandler) {\r\n    database.Order.findOne({\r\n      where: { id },\r\n    }).then(order => callback(order))\r\n      .catch(error => errorHandler(error));\r\n  }\r\n\r\n  modify(orderId, mealsIdArr, callback, errorCallback) {\r\n    database.Meals.findOne({\r\n      where: { id: mealsIdArr },\r\n      includes: [{\r\n        model: database.Menu,\r\n        through: 'mealId',\r\n        as: 'menus',\r\n        where: { dateCreated: new Date().toDateString() },\r\n        attributes: [],\r\n      }],\r\n    })\r\n      .then((meals) => {\r\n        if (meals.length > 0) {\r\n          database.Order.findOne({\r\n            where: { id: orderId },\r\n          }).then((order) => {\r\n            order.setMeals(meals);\r\n            callback(order, meals);\r\n          });\r\n        } else {\r\n          callback();\r\n        }\r\n      }).catch(error => errorCallback(error));\r\n  }\r\n}\r\n\r\nexport default new OrderService();\r\n"]}