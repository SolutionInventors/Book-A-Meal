{"version":3,"sources":["../../models/index.js"],"names":["env","process","NODE_ENV","config","require","__dirname","basename","__filename","db","sequelize","use_env_variable","database","username","password","filter","file","indexOf","slice","forEach","model","import","name","Object","keys","modelName","associate","Sequelize"],"mappings":";;;;;;AAGA;;AACA;;AACA;;;;;;AAGA,IAAMA,MAAMC,QAAQD,GAAR,CAAYE,QAAZ,IAAwB,aAApC,C,CARA;AACA;;AAQA,IAAMC,SAASC,QAAWC,SAAX,6BAA8CL,GAA9C,CAAf;;AAEA,IAAMM,WAAW,oBAAUC,UAAV,CAAjB;;AAEA,IAAMC,KAAK,EAAX;;AAEA,IAAIC,kBAAJ;AACA,IAAIN,OAAOO,gBAAX,EAA6B;AAC3BD,cAAY,wBAAcR,QAAQD,GAAR,CAAYG,OAAOO,gBAAnB,CAAd,EAAoDP,MAApD,CAAZ;AACD,CAFD,MAEO;AACLM,cAAY,wBAAcN,OAAOQ,QAArB,EAA+BR,OAAOS,QAAtC,EAAgDT,OAAOU,QAAvD,EAAiEV,MAAjE,CAAZ;AACD;;AAED,qBAAYE,SAAZ,EACGS,MADH,CACU;AAAA,SAASC,KAAKC,OAAL,CAAa,GAAb,MAAsB,CAAvB,IAA8BD,SAAST,QAAvC,IAAqDS,KAAKE,KAAL,CAAW,CAAC,CAAZ,MAAmB,KAAhF;AAAA,CADV,EAEGC,OAFH,CAEW,UAACH,IAAD,EAAU;AACjB,MAAMI,QAAQV,UAAUW,MAAV,CAAiB,gBAAKf,SAAL,EAAgBU,IAAhB,CAAjB,CAAd;AACAP,KAAGW,MAAME,IAAT,IAAiBF,KAAjB;AACD,CALH;;AAOAG,OAAOC,IAAP,CAAYf,EAAZ,EAAgBU,OAAhB,CAAwB,UAACM,SAAD,EAAe;AACrC,MAAIhB,GAAGgB,SAAH,EAAcC,SAAlB,EAA6B;AAC3BjB,OAAGgB,SAAH,EAAcC,SAAd,CAAwBjB,EAAxB;AACD;AACF,CAJD;;AAMAA,GAAGC,SAAH,GAAeA,SAAf;AACAD,GAAGkB,SAAH;;kBAEelB,E","file":"index.js","sourcesContent":["/* eslint import/no-dynamic-require: warn */\n/* eslint no-useless-escape: warn */\n\nimport { readdirSync } from 'fs';\nimport { basename as _basename, join } from 'path';\nimport Sequelize from 'sequelize';\n\n\nconst env = process.env.NODE_ENV || 'development';\nconst config = require(`${__dirname}/../config/config.json`)[env];\n\nconst basename = _basename(__filename);\n\nconst db = {};\n\nlet sequelize;\nif (config.use_env_variable) {\n  sequelize = new Sequelize(process.env[config.use_env_variable], config);\n} else {\n  sequelize = new Sequelize(config.database, config.username, config.password, config);\n}\n\nreaddirSync(__dirname)\n  .filter(file => (file.indexOf('.') !== 0) && (file !== basename) && (file.slice(-3) === '.js'))\n  .forEach((file) => {\n    const model = sequelize.import(join(__dirname, file));\n    db[model.name] = model;\n  });\n\nObject.keys(db).forEach((modelName) => {\n  if (db[modelName].associate) {\n    db[modelName].associate(db);\n  }\n});\n\ndb.sequelize = sequelize;\ndb.Sequelize = Sequelize;\n\nexport default db;\n"]}